(set-logic LIA)
(define-fun findIdx ((y1 Int)(y2 Int)(y3 Int)(y4 Int)(y5 Int)(y6 Int)(k1 Int)) Int
    (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 (ite (< k1 y5) 4 (ite (< k1 y6) 5 6))))))
)

(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (< k x1) (= (findIdx x1 x2 x3 x4 x5 x6 k) 0)))))
(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (> k x6) (= (findIdx x1 x2 x3 x4 x5 x6 k) 6)))))
(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (and (> k x1) (< k x2)) (= (findIdx x1 x2 x3 x4 x5 x6 k) 1)))))
(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (and (> k x2) (< k x3)) (= (findIdx x1 x2 x3 x4 x5 x6 k) 2)))))
(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (and (> k x3) (< k x4)) (= (findIdx x1 x2 x3 x4 x5 x6 k) 3)))))
(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (and (> k x4) (< k x5)) (= (findIdx x1 x2 x3 x4 x5 x6 k) 4)))))
(assert (forall ((k Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)(x6 Int))
           (=> (and (< x1 x2) (and (< x2 x3) (and (< x3 x4) (and (< x4 x5) (< x5 x6))))) (=> (and (> k x5) (< k x6)) (= (findIdx x1 x2 x3 x4 x5 x6 k) 5)))))
(check-sat)
