
== 当前评测机负载: 0.0 / 16

== 评测环境：

$ uname -a
Linux container 5.15.153.1-microsoft-standard-WSL2 #1 SMP Fri Mar 29 23:14:13 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

$ z3 --version
Z3 version 4.13.4 - 64 bit

$ python3 -VV
Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]

$ pypy3 -VV
/bin/sh: 1: pypy3: not found

$ java -version
/bin/sh: 1: java: not found

$ node -v
/bin/sh: 1: node: not found

== 解压提交的 .zip 文件
Archive:  submission.zip
  inflating: submission/pkusoftwareanalysislab2  
  inflating: submission/run.sh       

== 运行 open_basic 测试：[1/4] 0.sl
The exp satisifies all constraints: "Synth Function Passed All Constraints"
(define-fun f ((x (_ BitVec 64))) (_ BitVec 64) (bvor x #x0000000000000001))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=3
exprs-details=(f 3)
sat

得分：1 ('correct', 3)
时间：0.06s

== 运行 open_basic 测试：[2/4] max2.sl
(define-fun max2 ((x Int) (y Int)) Int (ite (>= y x) y x))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=6
exprs-details=(max2 6)
sat

得分：1 ('correct', 6)
时间：0.03s

== 运行 open_basic 测试：[3/4] three.sl
The exp satisifies all constraints: "Synth Function Passed All Constraints"
(define-fun f ((x Int)) Int (mod (* x 3) 10))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=5
exprs-details=(f 5)
sat

得分：1 ('correct', 5)
时间：0.06s

== 运行 open_basic 测试：[4/4] tutorial.sl
The exp satisifies all constraints: "Synth Function Passed All Constraints"
(define-fun rec ((x Int) (y Int) (z Int)) Int (* (+ x x) (- y z)))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=7
exprs-details=(rec 7)
sat

得分：1 ('correct', 7)
时间：0.11s

== 运行 open_lia 测试：[1/11] array_search_2.sl
(define-fun findIdx ((y1 Int) (y2 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 2)))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=11
exprs-details=(findIdx 11)
sat

得分：1 ('correct', 11)
时间：0.03s

== 运行 open_lia 测试：[2/11] array_search_4.sl
(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 4)))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=21
exprs-details=(findIdx 21)
sat

得分：1 ('correct', 21)
时间：0.06s

== 运行 open_lia 测试：[3/11] array_search_6.sl
(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (y5 Int) (y6 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 (ite (< k1 y5) 4 (ite (< k1 y6) 5 6)))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=31
exprs-details=(findIdx 31)
sat

得分：1 ('correct', 31)
时间：0.06s

== 运行 open_lia 测试：[4/11] array_search_8.sl
(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (y5 Int) (y6 Int) (y7 Int) (y8 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 (ite (< k1 y5) 4 (ite (< k1 y6) 5 (ite (< k1 y7) 6 (ite (< k1 y8) 7 8)))))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=41
exprs-details=(findIdx 41)
sat

得分：1 ('correct', 41)
时间：0.06s

== 运行 open_lia 测试：[5/11] array_search_10.sl
(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (y5 Int) (y6 Int) (y7 Int) (y8 Int) (y9 Int) (y10 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 (ite (< k1 y5) 4 (ite (< k1 y6) 5 (ite (< k1 y7) 6 (ite (< k1 y8) 7 (ite (< k1 y9) 8 (ite (< k1 y10) 9 10)))))))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=51
exprs-details=(findIdx 51)
sat

得分：1 ('correct', 51)
时间：0.06s

== 运行 open_lia 测试：[6/11] array_search_12.sl
(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (y5 Int) (y6 Int) (y7 Int) (y8 Int) (y9 Int) (y10 Int) (y11 Int) (y12 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 (ite (< k1 y5) 4 (ite (< k1 y6) 5 (ite (< k1 y7) 6 (ite (< k1 y8) 7 (ite (< k1 y9) 8 (ite (< k1 y10) 9 (ite (< k1 y11) 10 (ite (< k1 y12) 11 12)))))))))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=61
exprs-details=(findIdx 61)
sat

得分：1 ('correct', 61)
时间：0.06s

== 运行 open_lia 测试：[7/11] array_search_14.sl
(define-fun findIdx ((y1 Int) (y2 Int) (y3 Int) (y4 Int) (y5 Int) (y6 Int) (y7 Int) (y8 Int) (y9 Int) (y10 Int) (y11 Int) (y12 Int) (y13 Int) (y14 Int) (k1 Int)) Int (ite (< k1 y1) 0 (ite (< k1 y2) 1 (ite (< k1 y3) 2 (ite (< k1 y4) 3 (ite (< k1 y5) 4 (ite (< k1 y6) 5 (ite (< k1 y7) 6 (ite (< k1 y8) 7 (ite (< k1 y9) 8 (ite (< k1 y10) 9 (ite (< k1 y11) 10 (ite (< k1 y12) 11 (ite (< k1 y13) 12 (ite (< k1 y14) 13 14)))))))))))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=71
exprs-details=(findIdx 71)
sat

得分：1 ('correct', 71)
时间：0.06s

== 运行 open_lia 测试：[8/11] max3.sl
(define-fun max3 ((x Int) (y Int) (z Int)) Int (ite (>= z (ite (>= y x) y x)) z (ite (>= y x) y x)))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=16
exprs-details=(max3 16)
sat

得分：1 ('correct', 16)
时间：0.03s

== 运行 open_lia 测试：[9/11] max5.sl
(define-fun max5 ((x Int) (y Int) (z Int) (w Int) (u Int)) Int (ite (>= u (ite (>= w (ite (>= z (ite (>= y x) y x)) z (ite (>= y x) y x))) w (ite (>= z (ite (>= y x) y x)) z (ite (>= y x) y x)))) u (ite (>= w (ite (>= z (ite (>= y x) y x)) z (ite (>= y x) y x))) w (ite (>= z (ite (>= y x) y x)) z (ite (>= y x) y x)))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=76
exprs-details=(max5 76)
sat

得分：1 ('correct', 76)
时间：0.03s

== 运行 open_lia 测试：[10/11] max7.sl
(define-fun max7 ((x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int) (x6 Int) (x7 Int)) Int (ite (>= x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))) x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=316
exprs-details=(max7 316)
sat

得分：1 ('correct', 316)
时间：0.03s

== 运行 open_lia 测试：[11/11] max9.sl
(define-fun max9 ((x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int) (x6 Int) (x7 Int) (x8 Int) (x9 Int)) Int (ite (>= x9 (ite (>= x8 (ite (>= x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))) x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))))) x8 (ite (>= x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))) x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))))) x9 (ite (>= x8 (ite (>= x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))) x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))))) x8 (ite (>= x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))) x7 (ite (>= x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))))) x6 (ite (>= x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))) x5 (ite (>= x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1))) x4 (ite (>= x3 (ite (>= x2 x1) x2 x1)) x3 (ite (>= x2 x1) x2 x1)))))))))
thread 'main' panicked at src/main.rs:54:14:
explicit panic
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

检查答案：
adheres=true 
exprs-total-size=1276
exprs-details=(max9 1276)
sat

得分：1 ('correct', 1276)
时间：0.03s

== 通过测试用例总数：15

Done.
